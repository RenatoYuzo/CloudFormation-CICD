Parameters:
  KeyPairName:
    Description: Name of an existing Amazon key pair to enable SSH or RDP access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: KeyPairName must be the name of an existing KeyPair.
  DevInstanceType:
    Description: Amazon instance type for EC2 Development Instance.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  ProdInstanceType:
    Description: Amazon instance type for EC2 Production Instance.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  RepositoryName:
    Description: Name of the repository that will be used to push and build the project.
    Type: String
    AllowedPattern: '[^A-Z]+'
    ConstraintDescription: Can contain only ASCII characters and should only contain lowercase characters.
  ArtifactStoreS3BucketName:
    Description: Name of the repository that will be used to push and build the project.
    Type: String
  EmailAddress:
    Description: Email Address for sending SNS notifications for CodeCommit.
    Type: String
    AllowedPattern: '.+@.+'
    ConstraintDescription: Must be a valid email.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'EC2 Instance Type'
        Parameters:
          - DevInstanceType
          - ProdInstanceType
      - Label:
          default: 'Amazon EC2 Configuration'
        Parameters:
          - KeyPairName
      - Label:
          default: 'Amazon CodeCommit Configuration'
        Parameters:
          - RepositoryName
          - EmailAddress
    ParameterLabels:
      DevInstanceType:
        default: 'Which instance type this development instance should use?'
      ProdInstanceType:
        default: 'Which instance type this production instance should use?'
      KeyPairName:
        default: 'Which key your EC2 instances should use?'
      RepositoryName:
        default: 'What is the name of your repository?'
      EmailAddress:
        default: 'What e-mail are you going to use for notifications?'

Resources:
  Ec2InstanceIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Ec2InstanceProfilePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'

  Ec2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref Ec2InstanceIamRole

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup with port 22, 8080 inbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0

  DevEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0000025f7c02a13b2
      InstanceType: !Ref DevInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      IamInstanceProfile: !Ref Ec2InstanceProfile
      Tags:
        - Key: Name
          Value: develop
        - Key: Created by
          Value: !Ref AWS::StackName
      UserData: 
        Fn::Base64: |  
          #!/bin/bash
          sudo yum -y update
          sudo yum -y install ruby
          sudo yum -y install wget
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          cd /home/ec2-user
          wget https://aws-codedeploy-us-east-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto      

  ProdEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0000025f7c02a13b2
      InstanceType: !Ref ProdInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      IamInstanceProfile: !Ref Ec2InstanceProfile
      Tags:
        - Key: Name
          Value: production
        - Key: Created by
          Value: !Ref AWS::StackName
      UserData: 
        Fn::Base64: |  
          #!/bin/bash
          sudo yum -y update
          sudo yum -y install ruby
          sudo yum -y install wget
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          cd /home/ec2-user
          wget https://aws-codedeploy-us-east-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto   

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref EmailAddress
        Protocol: email
      Tags:
        - Key: Created by
          Value: !Ref AWS::StackName

  CodeCommitRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryDescription: Repository of the project used to push and build commit changes
      RepositoryName: !Ref RepositoryName
      Triggers:
      - Name: BranchTrigger
        CustomData: !Ref AWS::StackName
        DestinationArn: !Ref SNSTopic
        Branches:
          - master
        Events:
          - all
      Tags:
        - Key: Created by
          Value: !Ref AWS::StackName

  ArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactStoreS3BucketName
      Tags:
        - Key: Created by
          Value: !Ref AWS::StackName

  CodeBuildIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub CodeBuildIamRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: "CodeBuildAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codecommit:GitPull"
                Resource:
                  - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource: '*'
      Tags:
        - Key: Created by
          Value: !Ref AWS::StackName

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub CodeBuildProject-${AWS::StackName}
      Description: !Sub Build war file for the ${RepositoryName} application
      ServiceRole: !GetAtt CodeBuildIamRole.Arn
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreS3BucketName
        Name: !Sub CodeBuildProject-${AWS::StackName}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
      Source:
        Location: !GetAtt CodeCommitRepository.CloneUrlHttp
        Type: CODECOMMIT
      TimeoutInMinutes: 15
      Tags:
        - Key: Created by
          Value: !Ref AWS::StackName

  CodeDeployIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub CodeDeployIamRole-${RepositoryName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "CodeDeployAccessPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 's3:*'
                  - 'tag:*'
                  - 'sns:Publish'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                Resource: '*'
      Tags:
        - Key: Created by
          Value: !Ref AWS::StackName

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: !Sub application-${AWS::StackName}
      ComputePlatform: Server

  DevDeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters: 
        - Key: Name
          Value: develop
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt CodeDeployIamRole.Arn      
      DeploymentGroupName: !Sub DevDeploymentGroup-${AWS::StackName}
    DependsOn: DevEc2Instance

  ProdDeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters: 
        - Key: Name
          Value: production
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt CodeDeployIamRole.Arn      
      DeploymentGroupName: !Sub ProdDeploymentGroup-${AWS::StackName}
    DependsOn: ProdEc2Instance

  CodePipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
  
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "CodePipelineAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                  - "codecommit:UploadArchive"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
  
  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub CICDPipe-${AWS::StackName}
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreS3BucketName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: ApplicationSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: master
                RepositoryName: !Ref RepositoryName
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Artfc
              RunOrder: 1
        - Name: DeployToDevEnvironment
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref DevDeploymentGroup
              InputArtifacts:
                - Name: Artfc
              RunOrder: 1
        - Name: ProductionApproval
          Actions:
            - Name: ProdApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: Approve Production deployment
              RunOrder: 1
        - Name: DeployToProductionEnvironment
          Actions:
            - Name: CodeDeploy
              InputArtifacts:
                - Name: Artfc
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref ProdDeploymentGroup
              RunOrder: 1
      
Outputs:
  DevAppURL:
    Description: Staging Application Access URL
    Value: !Sub 'http://${DevEc2Instance.PublicDnsName}:8080'
  ProdAppURL:
    Description: Prod Application Access URL
    Value: !Sub 'http://${ProdEc2Instance.PublicDnsName}:8080'
  CodeCommitConsoleUrl:
    Value: !Sub https://console.aws.amazon.com/codesuite/codecommit/repositories/${RepositoryName}/setup?region=${AWS::Region}
    Description: Console URL for AWS CodeCommit.
  GitCloneCommand:
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
    Description: Git Repository HTTP URL used to clone the project.